from pathlib import Path
from pymake.common.cmake_version import ECMakeVersion
from pymake.common.project_language import EProjectLanguage
from pymake.core.project import Project
from pymake.core.project_state import ProjectState
from pymake.generation.basic_generator import BasicGenerator
from pymake.helpers.caller_info import CallerInfo
from typing import Iterable

class CMake:
    """
    Primary class used to generate CMake build scripts.
    """

    def __init__(self,
        min_version: ECMakeVersion,
        generated_tree_path: str = "./.pymake"):
        """
        Initializes the object.
        @param min_version Minimum CMake version for the build scripts.
        @param generated_tree_path Path to the folder where all CMake build
          scripts generated by PyMake will be placed. If this is a relative
          path, it will be interpreted relative to the path of the script
          invoking this method.
        """
        self._min_version = min_version
        self._call_site = CallerInfo(1)

        # Path to the top level folder for the project
        source_tree_path = Path(self._call_site.file_path).parent

        # Use the folder containing the script constructing this object as the
        #   base path for the project. All other paths will be processed as
        #   paths relative to this path.
        generated_tree_abs_path = Path(generated_tree_path)
        if not generated_tree_abs_path.is_absolute():
            generated_tree_abs_path = Path.joinpath(
                source_tree_path,
                Path(generated_tree_path)
            ).resolve()

        self._project_state = ProjectState(
            source_tree_path,
            generated_tree_abs_path
        )

        # Build script for the top-level CMakeLists.txt
        top_level_build_script = self._project_state.get_or_add_build_script(
            caller_offset=1
        )
        top_level_build_script.add_generator(BasicGenerator(
            f"cmake_minimum_required(VERSION {min_version.to_version_string()})",
            caller_offset=1
        ))

    def add_project(self,
        project_name: str,
        project_languages: EProjectLanguage | Iterable[EProjectLanguage]) -> Project:
        """
        Adds a new CMake project scope.
        @param project_name Name to assign to the project. Must not be an empty
          string or all whitespace.
        @param project_languages Languages used by the project.
        @throws ValueError thrown if any parameter is invalid.
        """
        return Project(
            self._project_state,
            project_name,
            project_languages,
            caller_offset=1
        )

    def build(self, generate_first: bool = True) -> None:
        """
        Builds the project via CMake.
        @param generate_first Whether `generate()` should be called before
          running the build. This should generally be left unchanged unless
          a call to `generate()` is made before this method is called (or using
          old versions of generated build scripts is acceptable).
        @throws RuntimeError Thrown if the build fails for any reason. Output
          from CMake will have been written to stdout and/or stderr, which
          should contain the error that was encountered.
        """
        if generate_first:
            self.generate()

    def generate(self) -> None:
        """
        Generates the build scripts for the project.
        """
        source_tree_path = self._project_state.source_tree_path

        # Temporary - print the generated file's contents instead of writing
        #   them to disk
        for build_script in self._project_state.build_scripts.values():
            print(f"File: {build_script.target_path}")
            print("========================================")
            print(build_script.generate_file_contents(source_tree_path))
            print("========================================")
            print()
